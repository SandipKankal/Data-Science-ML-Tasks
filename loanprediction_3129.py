# -*- coding: utf-8 -*-
"""LoanPrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yBfK2PWPGsGLOwsQGAn0A4VP1wUYU6ie
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.impute import SimpleImputer
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

data = pd.read_csv('/content/train_u6lujuX_CVtuZ9i (1).csv')

data['Dependents'] = data['Dependents'].replace('3+', 3)
data['Dependents'] = pd.to_numeric(data['Dependents'])

label_encoder = LabelEncoder()
for column in ['Gender', 'Married', 'Education', 'Self_Employed', 'Property_Area', 'Loan_Status']:
    data[column] = label_encoder.fit_transform(data[column])

imputer = SimpleImputer(strategy='mean')
numeric_columns = ['LoanAmount', 'Loan_Amount_Term', 'Credit_History']
for column in numeric_columns:
    data[column] = imputer.fit_transform(data[[column]])

categorical_columns = ['Gender', 'Married', 'Dependents', 'Self_Employed']
imputer_categorical = SimpleImputer(strategy='most_frequent')
for column in categorical_columns:
    data[column] = imputer_categorical.fit_transform(data[[column]])

# Split the Dataset into Features and Target Variable
X = data.drop(['Loan_ID', 'Loan_Status'], axis=1)  # Features
y = data['Loan_Status']  # Target variable

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

logistic_model = LogisticRegression()
logistic_model.fit(X_train, y_train)

# Logistic Regression Model
y_pred_logistic = logistic_model.predict(X_test)
logistic_accuracy = accuracy_score(y_test, y_pred_logistic)
print(f'Logistic Regression Accuracy: {logistic_accuracy}')

# Decision Tree Model
tree_model = DecisionTreeClassifier(random_state=42)
tree_model.fit(X_train, y_train)

# Calculate accuracy
y_pred_tree = tree_model.predict(X_test)
tree_accuracy = accuracy_score(y_test, y_pred_tree)
print(f'Decision Tree Accuracy: {tree_accuracy}')

if logistic_accuracy > tree_accuracy:
    best_model = logistic_model
    print("Logistic Regression is the best model.")
else:
    best_model = tree_model
    print("Decision Tree is the best model.")

'''
Gender: 0 (Female), 1 (Male)
Married: 0 (No), 1 (Yes)
Dependents: 0, 1, 2, or 3 (converted from '3+')
Education: 0 (Not Graduate), 1 (Graduate)
Self_Employed: 0 (No), 1 (Yes)
ApplicantIncome: Numeric value
CoapplicantIncome: Numeric value
LoanAmount: Numeric value (in thousands)
Loan_Amount_Term: Numeric value (in months)
Credit_History: 0 (No), 1 (Yes)
Property_Area: 0 (Rural), 1 (Semiurban), 2 (Urban)
'''

# input
new_data = [[1, 1, 0, 1, 0, 5000, 0, 150, 360, 1, 2]]
loan_approval = best_model.predict(new_data)
print("Loan ApprovalÂ Prediction:", "Approved" if loan_approval[0] == 1 else "Not Approved")

from google.colab import drive
drive.mount('/content/drive')