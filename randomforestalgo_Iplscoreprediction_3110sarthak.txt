# -*- coding: utf-8 -*-
"""Defaulter.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15sKS40pMPl6EpQchR_T8puvRc9StHbgF
"""

import pandas as pd
df = pd.read_csv('/content/deliveries.csv')
print(df.head())
deliveries = pd.read_csv('/content/deliveries.csv')
print(deliveries.head())

grouped_data = deliveries.groupby(['match_id', 'over']).agg({'total_runs': 'sum'}).reset_index()
print(grouped_data.head())
X = grouped_data[['over']]  # Input feature: over
y = grouped_data['total_runs']  # Target: total runs

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)
lr_pred = lr_model.predict(X_test)
print("Linear Regression Predictions:", lr_pred)

from sklearn.tree import DecisionTreeRegressor
dt_model = DecisionTreeRegressor(random_state=42)
dt_model.fit(X_train, y_train)
dt_pred = dt_model.predict(X_test)
print("Decision Tree Predictions:", dt_pred)

from sklearn.ensemble import RandomForestRegressor
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
rf_pred = rf_model.predict(X_test)
print("Random Forest Predictions:", rf_pred)

import pandas as pd
deliveries = pd.read_csv('/content/deliveries.csv')
print("Missing values in deliveries dataset:")
print(deliveries.isnull().sum())
deliveries_cleaned = deliveries.dropna()
print("Data after dropping missing values:")frrg
print(deliveries_cleaned.head())

import matplotlib.pyplot as plt
grouped_data = deliveries.groupby(['match_id', 'over']).agg({'total_runs': 'sum'}).reset_index()
plt.figure(figsize=(10, 5))
plt.hist(grouped_data['total_runs'], bins=20, color='skyblue', edgecolor='black')
plt.title('Histogram of Total Runs per Over')
plt.xlabel('Total Runs')
plt.ylabel('Frequency')
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
plt.figure(figsize=(8, 6))
sns.boxplot(data=grouped_data, y='total_runs', color='lightblue')
plt.title('Boxplot of Total Runs per Over')
plt.ylabel('Total Runs')
plt.show()